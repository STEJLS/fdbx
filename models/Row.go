// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Row struct {
	_tab flatbuffers.Table
}

func GetRootAsRow(buf []byte, offset flatbuffers.UOffsetT) *Row {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Row{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Row) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Row) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Row) XMin() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Row) MutateXMin(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Row) XMax() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Row) MutateXMax(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Row) CMin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Row) MutateCMin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Row) CMax() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Row) MutateCMax(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Row) Hash() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Row) MutateHash(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *Row) Blob() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Row) MutateBlob(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *Row) GZip() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Row) MutateGZip(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *Row) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Row) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Row) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Row) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RowStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func RowAddXMin(builder *flatbuffers.Builder, XMin uint64) {
	builder.PrependUint64Slot(0, XMin, 0)
}
func RowAddXMax(builder *flatbuffers.Builder, XMax uint64) {
	builder.PrependUint64Slot(1, XMax, 0)
}
func RowAddCMin(builder *flatbuffers.Builder, CMin uint32) {
	builder.PrependUint32Slot(2, CMin, 0)
}
func RowAddCMax(builder *flatbuffers.Builder, CMax uint32) {
	builder.PrependUint32Slot(3, CMax, 0)
}
func RowAddHash(builder *flatbuffers.Builder, Hash uint64) {
	builder.PrependUint64Slot(4, Hash, 0)
}
func RowAddBlob(builder *flatbuffers.Builder, Blob bool) {
	builder.PrependBoolSlot(5, Blob, false)
}
func RowAddGZip(builder *flatbuffers.Builder, GZip bool) {
	builder.PrependBoolSlot(6, GZip, false)
}
func RowAddData(builder *flatbuffers.Builder, Data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(Data), 0)
}
func RowStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RowEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
