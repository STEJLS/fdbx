// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TestRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsTestRecord(buf []byte, offset flatbuffers.UOffsetT) *TestRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TestRecord{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TestRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TestRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TestRecord) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TestRecord) Number() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TestRecord) MutateNumber(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *TestRecord) Float() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TestRecord) MutateFloat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *TestRecord) Logic() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TestRecord) MutateLogic(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *TestRecord) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TestRecord) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TestRecord) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TestRecord) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TestRecord) Strings(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TestRecord) StringsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TestRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func TestRecordAddName(builder *flatbuffers.Builder, Name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Name), 0)
}
func TestRecordAddNumber(builder *flatbuffers.Builder, Number uint64) {
	builder.PrependUint64Slot(1, Number, 0)
}
func TestRecordAddFloat(builder *flatbuffers.Builder, Float float64) {
	builder.PrependFloat64Slot(2, Float, 0.0)
}
func TestRecordAddLogic(builder *flatbuffers.Builder, Logic bool) {
	builder.PrependBoolSlot(3, Logic, false)
}
func TestRecordAddData(builder *flatbuffers.Builder, Data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(Data), 0)
}
func TestRecordStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TestRecordAddStrings(builder *flatbuffers.Builder, Strings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(Strings), 0)
}
func TestRecordStartStringsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TestRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
