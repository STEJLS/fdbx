// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Transaction struct {
	_tab flatbuffers.Table
}

func GetRootAsTransaction(buf []byte, offset flatbuffers.UOffsetT) *Transaction {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Transaction{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Transaction) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Transaction) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Transaction) TxID() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Transaction) MutateTxID(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Transaction) Start() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Transaction) MutateStart(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Transaction) Committed() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 2
}

func (rcv *Transaction) MutateCommitted(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func TransactionStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TransactionAddTxID(builder *flatbuffers.Builder, TxID uint64) {
	builder.PrependUint64Slot(0, TxID, 0)
}
func TransactionAddStart(builder *flatbuffers.Builder, Start uint64) {
	builder.PrependUint64Slot(1, Start, 0)
}
func TransactionAddCommitted(builder *flatbuffers.Builder, Committed int8) {
	builder.PrependInt8Slot(2, Committed, 2)
}
func TransactionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
