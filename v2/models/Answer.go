// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AnswerT struct {
	Err bool
	Buf []byte
}

func (t *AnswerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	bufOffset := flatbuffers.UOffsetT(0)
	if t.Buf != nil {
		bufOffset = builder.CreateByteString(t.Buf)
	}
	AnswerStart(builder)
	AnswerAddErr(builder, t.Err)
	AnswerAddBuf(builder, bufOffset)
	return AnswerEnd(builder)
}

func (rcv *Answer) UnPackTo(t *AnswerT) {
	t.Err = rcv.Err()
	t.Buf = rcv.BufBytes()
}

func (rcv *Answer) UnPack() *AnswerT {
	if rcv == nil {
		return nil
	}
	t := &AnswerT{}
	rcv.UnPackTo(t)
	return t
}

type Answer struct {
	_tab flatbuffers.Table
}

func GetRootAsAnswer(buf []byte, offset flatbuffers.UOffsetT) *Answer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Answer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Answer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Answer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Answer) Err() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Answer) MutateErr(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *Answer) Buf(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Answer) BufLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Answer) BufBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Answer) MutateBuf(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func AnswerStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AnswerAddErr(builder *flatbuffers.Builder, err bool) {
	builder.PrependBoolSlot(0, err, false)
}
func AnswerAddBuf(builder *flatbuffers.Builder, buf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(buf), 0)
}
func AnswerStartBufVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func AnswerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
