// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CursorT struct {
	Reverse bool
	IdxType uint16
	LastKey []byte
	IPrefix []byte
	QueryID []byte
}

func (t *CursorT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	LastKeyOffset := flatbuffers.UOffsetT(0)
	if t.LastKey != nil {
		LastKeyOffset = builder.CreateByteString(t.LastKey)
	}
	IPrefixOffset := flatbuffers.UOffsetT(0)
	if t.IPrefix != nil {
		IPrefixOffset = builder.CreateByteString(t.IPrefix)
	}
	QueryIDOffset := flatbuffers.UOffsetT(0)
	if t.QueryID != nil {
		QueryIDOffset = builder.CreateByteString(t.QueryID)
	}
	CursorStart(builder)
	CursorAddReverse(builder, t.Reverse)
	CursorAddIdxType(builder, t.IdxType)
	CursorAddLastKey(builder, LastKeyOffset)
	CursorAddIPrefix(builder, IPrefixOffset)
	CursorAddQueryID(builder, QueryIDOffset)
	return CursorEnd(builder)
}

func (rcv *Cursor) UnPackTo(t *CursorT) {
	t.Reverse = rcv.Reverse()
	t.IdxType = rcv.IdxType()
	t.LastKey = rcv.LastKeyBytes()
	t.IPrefix = rcv.IPrefixBytes()
	t.QueryID = rcv.QueryIDBytes()
}

func (rcv *Cursor) UnPack() *CursorT {
	if rcv == nil {
		return nil
	}
	t := &CursorT{}
	rcv.UnPackTo(t)
	return t
}

type Cursor struct {
	_tab flatbuffers.Table
}

func GetRootAsCursor(buf []byte, offset flatbuffers.UOffsetT) *Cursor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Cursor{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Cursor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Cursor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Cursor) Reverse() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Cursor) MutateReverse(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *Cursor) IdxType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Cursor) MutateIdxType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *Cursor) LastKey(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Cursor) LastKeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Cursor) LastKeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cursor) MutateLastKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Cursor) IPrefix(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Cursor) IPrefixLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Cursor) IPrefixBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cursor) MutateIPrefix(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Cursor) QueryID(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Cursor) QueryIDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Cursor) QueryIDBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Cursor) MutateQueryID(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func CursorStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CursorAddReverse(builder *flatbuffers.Builder, Reverse bool) {
	builder.PrependBoolSlot(0, Reverse, false)
}
func CursorAddIdxType(builder *flatbuffers.Builder, IdxType uint16) {
	builder.PrependUint16Slot(1, IdxType, 0)
}
func CursorAddLastKey(builder *flatbuffers.Builder, LastKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(LastKey), 0)
}
func CursorStartLastKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CursorAddIPrefix(builder *flatbuffers.Builder, IPrefix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(IPrefix), 0)
}
func CursorStartIPrefixVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CursorAddQueryID(builder *flatbuffers.Builder, QueryID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(QueryID), 0)
}
func CursorStartQueryIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CursorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
