// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QueryT struct {
	Size    uint32
	Page    uint32
	Limit   uint32
	Reverse bool
	IdxType uint16
	LastKey []byte
	IdxFrom []byte
	IdxLast []byte
	QueryID []byte
}

func (t *QueryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	lastKeyOffset := flatbuffers.UOffsetT(0)
	if t.LastKey != nil {
		lastKeyOffset = builder.CreateByteString(t.LastKey)
	}
	idxFromOffset := flatbuffers.UOffsetT(0)
	if t.IdxFrom != nil {
		idxFromOffset = builder.CreateByteString(t.IdxFrom)
	}
	idxLastOffset := flatbuffers.UOffsetT(0)
	if t.IdxLast != nil {
		idxLastOffset = builder.CreateByteString(t.IdxLast)
	}
	queryIDOffset := flatbuffers.UOffsetT(0)
	if t.QueryID != nil {
		queryIDOffset = builder.CreateByteString(t.QueryID)
	}
	QueryStart(builder)
	QueryAddSize(builder, t.Size)
	QueryAddPage(builder, t.Page)
	QueryAddLimit(builder, t.Limit)
	QueryAddReverse(builder, t.Reverse)
	QueryAddIdxType(builder, t.IdxType)
	QueryAddLastKey(builder, lastKeyOffset)
	QueryAddIdxFrom(builder, idxFromOffset)
	QueryAddIdxLast(builder, idxLastOffset)
	QueryAddQueryID(builder, queryIDOffset)
	return QueryEnd(builder)
}

func (rcv *Query) UnPackTo(t *QueryT) {
	t.Size = rcv.Size()
	t.Page = rcv.Page()
	t.Limit = rcv.Limit()
	t.Reverse = rcv.Reverse()
	t.IdxType = rcv.IdxType()
	t.LastKey = rcv.LastKeyBytes()
	t.IdxFrom = rcv.IdxFromBytes()
	t.IdxLast = rcv.IdxLastBytes()
	t.QueryID = rcv.QueryIDBytes()
}

func (rcv *Query) UnPack() *QueryT {
	if rcv == nil {
		return nil
	}
	t := &QueryT{}
	rcv.UnPackTo(t)
	return t
}

type Query struct {
	_tab flatbuffers.Table
}

func GetRootAsQuery(buf []byte, offset flatbuffers.UOffsetT) *Query {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Query{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsQuery(buf []byte, offset flatbuffers.UOffsetT) *Query {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Query{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Query) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Query) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Query) Size() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Query) MutateSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Query) Page() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Query) MutatePage(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Query) Limit() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Query) MutateLimit(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Query) Reverse() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Query) MutateReverse(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Query) IdxType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Query) MutateIdxType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *Query) LastKey(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Query) LastKeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Query) LastKeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Query) MutateLastKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Query) IdxFrom(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Query) IdxFromLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Query) IdxFromBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Query) MutateIdxFrom(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Query) IdxLast(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Query) IdxLastLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Query) IdxLastBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Query) MutateIdxLast(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Query) QueryID(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Query) QueryIDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Query) QueryIDBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Query) MutateQueryID(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func QueryStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func QueryAddSize(builder *flatbuffers.Builder, size uint32) {
	builder.PrependUint32Slot(0, size, 0)
}
func QueryAddPage(builder *flatbuffers.Builder, page uint32) {
	builder.PrependUint32Slot(1, page, 0)
}
func QueryAddLimit(builder *flatbuffers.Builder, limit uint32) {
	builder.PrependUint32Slot(2, limit, 0)
}
func QueryAddReverse(builder *flatbuffers.Builder, reverse bool) {
	builder.PrependBoolSlot(3, reverse, false)
}
func QueryAddIdxType(builder *flatbuffers.Builder, idxType uint16) {
	builder.PrependUint16Slot(4, idxType, 0)
}
func QueryAddLastKey(builder *flatbuffers.Builder, lastKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(lastKey), 0)
}
func QueryStartLastKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QueryAddIdxFrom(builder *flatbuffers.Builder, idxFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idxFrom), 0)
}
func QueryStartIdxFromVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QueryAddIdxLast(builder *flatbuffers.Builder, idxLast flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idxLast), 0)
}
func QueryStartIdxLastVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QueryAddQueryID(builder *flatbuffers.Builder, queryID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(queryID), 0)
}
func QueryStartQueryIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func QueryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
