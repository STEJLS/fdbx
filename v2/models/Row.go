// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RowT struct {
	Drop []*TxPtrT
	Data []byte
}

func (t *RowT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dropOffset := flatbuffers.UOffsetT(0)
	if t.Drop != nil {
		dropLength := len(t.Drop)
		dropOffsets := make([]flatbuffers.UOffsetT, dropLength)
		for j := 0; j < dropLength; j++ {
			dropOffsets[j] = t.Drop[j].Pack(builder)
		}
		RowStartDropVector(builder, dropLength)
		for j := dropLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(dropOffsets[j])
		}
		dropOffset = builder.EndVector(dropLength)
	}
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	RowStart(builder)
	RowAddDrop(builder, dropOffset)
	RowAddData(builder, dataOffset)
	return RowEnd(builder)
}

func (rcv *Row) UnPackTo(t *RowT) {
	dropLength := rcv.DropLength()
	t.Drop = make([]*TxPtrT, dropLength)
	for j := 0; j < dropLength; j++ {
		x := TxPtr{}
		rcv.Drop(&x, j)
		t.Drop[j] = x.UnPack()
	}
	t.Data = rcv.DataBytes()
}

func (rcv *Row) UnPack() *RowT {
	if rcv == nil {
		return nil
	}
	t := &RowT{}
	rcv.UnPackTo(t)
	return t
}

type Row struct {
	_tab flatbuffers.Table
}

func GetRootAsRow(buf []byte, offset flatbuffers.UOffsetT) *Row {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Row{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRow(buf []byte, offset flatbuffers.UOffsetT) *Row {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Row{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Row) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Row) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Row) Drop(obj *TxPtr, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Row) DropLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Row) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Row) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Row) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Row) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RowStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RowAddDrop(builder *flatbuffers.Builder, drop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(drop), 0)
}
func RowStartDropVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RowAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func RowStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RowEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
