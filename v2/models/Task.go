// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TaskT struct {
	Key     []byte
	State   *TaskStateT
	Creator string
	Headers []*TaskHeaderT
}

func (t *TaskT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != nil {
		keyOffset = builder.CreateByteString(t.Key)
	}
	creatorOffset := builder.CreateString(t.Creator)
	headersOffset := flatbuffers.UOffsetT(0)
	if t.Headers != nil {
		headersLength := len(t.Headers)
		headersOffsets := make([]flatbuffers.UOffsetT, headersLength)
		for j := 0; j < headersLength; j++ {
			headersOffsets[j] = t.Headers[j].Pack(builder)
		}
		TaskStartHeadersVector(builder, headersLength)
		for j := headersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(headersOffsets[j])
		}
		headersOffset = builder.EndVector(headersLength)
	}
	TaskStart(builder)
	TaskAddKey(builder, keyOffset)
	stateOffset := t.State.Pack(builder)
	TaskAddState(builder, stateOffset)
	TaskAddCreator(builder, creatorOffset)
	TaskAddHeaders(builder, headersOffset)
	return TaskEnd(builder)
}

func (rcv *Task) UnPackTo(t *TaskT) {
	t.Key = rcv.KeyBytes()
	t.State = rcv.State(nil).UnPack()
	t.Creator = string(rcv.Creator())
	headersLength := rcv.HeadersLength()
	t.Headers = make([]*TaskHeaderT, headersLength)
	for j := 0; j < headersLength; j++ {
		x := TaskHeader{}
		rcv.Headers(&x, j)
		t.Headers[j] = x.UnPack()
	}
}

func (rcv *Task) UnPack() *TaskT {
	if rcv == nil {
		return nil
	}
	t := &TaskT{}
	rcv.UnPackTo(t)
	return t
}

type Task struct {
	_tab flatbuffers.Table
}

func GetRootAsTask(buf []byte, offset flatbuffers.UOffsetT) *Task {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Task{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTask(buf []byte, offset flatbuffers.UOffsetT) *Task {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Task{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Task) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Task) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Task) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Task) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Task) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Task) MutateKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Task) State(obj *TaskState) *TaskState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(TaskState)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Task) Creator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Task) Headers(obj *TaskHeader, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Task) HeadersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TaskStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TaskAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func TaskStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TaskAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(state), 0)
}
func TaskAddCreator(builder *flatbuffers.Builder, creator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(creator), 0)
}
func TaskAddHeaders(builder *flatbuffers.Builder, headers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(headers), 0)
}
func TaskStartHeadersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TaskEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
