// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TransactionT struct {
	Start  int64
	Status byte
}

func (t *TransactionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	TransactionStart(builder)
	TransactionAddStart(builder, t.Start)
	TransactionAddStatus(builder, t.Status)
	return TransactionEnd(builder)
}

func (rcv *Transaction) UnPackTo(t *TransactionT) {
	t.Start = rcv.Start()
	t.Status = rcv.Status()
}

func (rcv *Transaction) UnPack() *TransactionT {
	if rcv == nil {
		return nil
	}
	t := &TransactionT{}
	rcv.UnPackTo(t)
	return t
}

type Transaction struct {
	_tab flatbuffers.Table
}

func GetRootAsTransaction(buf []byte, offset flatbuffers.UOffsetT) *Transaction {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Transaction{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Transaction) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Transaction) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Transaction) Start() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Transaction) MutateStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Transaction) Status() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 3
}

func (rcv *Transaction) MutateStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func TransactionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TransactionAddStart(builder *flatbuffers.Builder, start int64) {
	builder.PrependInt64Slot(0, start, 0)
}
func TransactionAddStatus(builder *flatbuffers.Builder, status byte) {
	builder.PrependByteSlot(1, status, 3)
}
func TransactionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
