// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package models

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TxPtrT struct {
	Op uint32
	Tx []byte
}

func (t *TxPtrT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	txOffset := flatbuffers.UOffsetT(0)
	if t.Tx != nil {
		txOffset = builder.CreateByteString(t.Tx)
	}
	TxPtrStart(builder)
	TxPtrAddOp(builder, t.Op)
	TxPtrAddTx(builder, txOffset)
	return TxPtrEnd(builder)
}

func (rcv *TxPtr) UnPackTo(t *TxPtrT) {
	t.Op = rcv.Op()
	t.Tx = rcv.TxBytes()
}

func (rcv *TxPtr) UnPack() *TxPtrT {
	if rcv == nil {
		return nil
	}
	t := &TxPtrT{}
	rcv.UnPackTo(t)
	return t
}

type TxPtr struct {
	_tab flatbuffers.Table
}

func GetRootAsTxPtr(buf []byte, offset flatbuffers.UOffsetT) *TxPtr {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TxPtr{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TxPtr) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TxPtr) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TxPtr) Op() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TxPtr) MutateOp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *TxPtr) Tx(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TxPtr) TxLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TxPtr) TxBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TxPtr) MutateTx(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func TxPtrStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TxPtrAddOp(builder *flatbuffers.Builder, op uint32) {
	builder.PrependUint32Slot(0, op, 0)
}
func TxPtrAddTx(builder *flatbuffers.Builder, tx flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tx), 0)
}
func TxPtrStartTxVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TxPtrEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
